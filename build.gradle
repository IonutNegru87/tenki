plugins {
    id 'kotlin-multiplatform' version '1.3.61'
    id 'org.hidetake.ssh' version '2.10.1'
}
repositories {
    mavenCentral()
    jcenter()
}

// Ktor is a framework for quickly creating web applications in Kotlin with minimal effort
ext.ktor_version = '1.2.5'
ext.slf4j_version = '1.6.1'

kotlin {
    experimental {
        coroutines "enable"
    }

    /**
     Kotlin/Native target presets (see the notes below):
     - androidNativeArm32 and androidNativeArm64 for Android NDK;
     - iosArm32, iosArm64, iosX64 for iOS;
     - linuxArm32Hfp, linuxMips32, linuxMipsel32, linuxX64 for Linux;
     - macosX64 for MacOS;
     - mingwX64 and mingwX86 for Windows;
     - wasm32 for WebAssembly.
     */

    linuxArm32Hfp("tenki") {
        binaries {
            executable {
                // Change to specify fully qualified name of your application's entry point:
                entryPoint = 'tenki.station.main'
                // Specify command-line arguments, if necessary:
                runTask?.args('')

                // libpigpio.so are compiled on raspberry pi and copied here
                linkerOpts("-Lsrc/include/pigpio", "-lpigpio")

                // libPCA9685.so are compiled on raspberry pi and copied here
                linkerOpts("-Lsrc/include/pca9685", "-lpca9685")
            }
        }

        compilations.main.cinterops {
                pigpio {
                    includeDirs 'src/include/pigpio'
                }
                pca9685 {
                    includeDirs 'src/include/pca9685'
                }
        }
    }

    targets {
        // For local server
        fromPreset(presets.jvm, 'server')
        configure([server]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }

    sourceSets {
//        // Note: To enable common source sets please comment out 'kotlin.import.noCommonSourceSets' property
//        // in gradle.properties file and re-import your project in IDE.
//        mingwMain {
//        }
//        mingwTest {
//        }

        serverMain {
            dependencies {
                implementation "io.ktor:ktor-server-core:$ktor_version"
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "org.slf4j:slf4j-simple:$slf4j_version"
            }
        }
    }
}

remotes {
    pi {
        // Address IP of the Raspberry PI
        host = '192.168.1.112'
        // User name for Raspberry PI
        user = 'pi' // default
        // Current machine identity
        identity = file("${System.properties['user.home']}/.ssh/raspberry_pi")
    }
}

task deployOnPi {
    doLast {
        ssh.run {
            session(remotes.pi) {
                def sourceFile = "$buildDir/bin/tenki/releaseExecutable/tenki-station.kexe"
                def destinationDir = "/home/pi/inegru/playground"

                put from: sourceFile, into: destinationDir
            }
        }
    }
}